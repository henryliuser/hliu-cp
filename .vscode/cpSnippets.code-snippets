{
	// Place your hliu-cp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ocaml template": {
		"scope": "ocaml",
		"prefix": "usual",
		"body": [
			"open Printf",
			"open Scanf",
			"module LL = Int64",
			"let ( !! )  x  = LL.to_int x",
			"let ( ++ ) x y = LL.add x y",
			"let ( -- ) x y = LL.sub x y",
			"let ( ** ) x y = LL.mul x y",
			"let ( // ) x y = LL.div x y",
			"let ( %% ) x y = LL.rem x y",
			"let ( >> ) x y = (LL.compare x y) > 0",
			"let ( << ) x y = (LL.compare x y) < 0",
			"let ( == ) x y = (LL.compare x y) = 0",
			"let rd_int _ = bscanf Scanning.stdin \" %d \" (fun x -> x)",
			"let rd_ll _ = bscanf Scanning.stdin \" %Ld \" (fun x -> x)",
			"let rd_arr n = Array.init n rd_ll",
			"",
			"$1",
			"",
			"let () =",
			"  let t = rd_int () in",
			"  for i=1 to t do",
			"    let n = rd_int () in",
			"    let x = rd_ll () in",
			"    printf \"%s\\n\" (solve n x)",
			"  done;"
		]
	}
}